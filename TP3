"""
Created on Fri Nov 12 08:50:53 2021

@author: laurafilet
"""
from math import *

# Question 1 

x0 = 0 
epsilon = 1e-11
Nitermax = 100

def Newton(f,fder,x0,epsilon,Nitermax) : 
    xold = x0
    xnew = xold - (f(xold)/fder(xold))
     
    n= 1 
     
    while abs(xnew - xold) > epsilon and n < Nitermax :
        xold = xnew
        xnew = xold - (f(xold)/fder(xold))
        n = n + 1
    print("Newton :\n",n)    
    return xnew 


# Question 2 

def Dichotomie (f,a0,b0,epsilon):
    
    n = 1
   
    while abs(b0 - a0) > epsilon and n < Nitermax :

        m = (a0 + b0)/2
        
        if (f(a0) * f(m) <= 0):
            b0 = m

        else :
            a0 = m

        n = n + 1
        
    print("Dichotomie :\n",n)
    return m 


# Question 3 

def Secante (f,x0,x1,epsilon,Nitermax):
    n = 1 

    while abs(x1 - x0) > epsilon and n < Nitermax :
        x2 = (x0 * f(x1) - x1 * f(x0))/(f(x1)-f(x0))
        x0,x1 = x1,x2
        n = n + 1
        
    print ("SÃ©cante :\n", n)    
    return x2


# Question 4 

# 1. x^2 e^x = 8

def f1 (x):
    return (x**2)*exp(x)-8

def f1der(x):
    return 2*x*exp(x)

print("f1 :", Newton(f1, f1der, 1, epsilon, Nitermax),"\n")
 
print ("f1 :", Dichotomie(f1, 0.5, 1.5, epsilon), "\n")

print("f1 :",Secante(f1, 0.5, 1.5, epsilon, Nitermax), "\n"*3)

# 2. exp x + sin x = 9 

def f2(x):
    return exp(x)+sin(x)-9
def f2der(x):
    return exp(x)+cos(x)

print("f2 :", Newton(f2, f2der, 2, epsilon, Nitermax),"\n")

print("f2 :", Dichotomie(f2, 1.5, 2.5, epsilon),"\n")

print("f2 :",Secante(f2, 1.5, 2.5, epsilon, Nitermax), "\n"*3)

# 3. 3x + x^3 = 2 

def f3(x):
    return 3*x + x**3 -2 
def f3der(x):
    return 3*x**2 + 3 

print("f3 :", Newton(f3, f3der, 0.6, epsilon, Nitermax),"\n")

print("f3 :", Dichotomie(f3, 0.5, 1, epsilon),"\n")

print("f3 :",Secante(f3, 0.5, 1, epsilon, Nitermax), "\n"*3)

# 4. 3x + x^3 = 9 

def f4 (x):
    return 3*x + x**3 -9 
def f4der(x):
    return 3 + 3*x**2

print ("f4 :", Newton(f4, f4der, 1.6, epsilon, Nitermax),"\n")

print ("f4 :", Dichotomie(f4, 1, 2, epsilon),"\n")

print("f4 :",Secante(f4, 1, 1.2, epsilon, Nitermax), "\n"*3)

# 5. x^4 + 2x = 11    -> 2 sol 

def f5 (x):
    return x**4 + 2 * x -11
def f5der(x):
    return 4*x**3 + 2 

print ("f5 :", Newton(f5, f5der, 2.1, epsilon, Nitermax))
print ("f5bis :", Newton(f5, f5der, -4.5, epsilon, Nitermax),"\n")

print ("f5 :", Dichotomie(f5, 1.5, 2.5, epsilon))
print ("f5bis :", Dichotomie(f5, -5, -1.5, epsilon),"\n")

print("f5 :",Secante(f5, 1.5, 2.5, epsilon, Nitermax))
print("f5bis :",Secante(f5, -5, -1.5, epsilon, Nitermax), "\n"*3)

# 6. x = 2 cos x + 3 

def f6(x):
    return x - 2 * cos(x) -3 
def f6der(x):
    return 2 * sin(x)

print("f6 :", Newton(f6, f6der, 2, epsilon, Nitermax),"\n")

print("f6 :", Dichotomie(f6, 1, 2.5, epsilon),"\n")

print("f6 :",Secante(f6, 1, 2.5, epsilon, Nitermax), "\n"*3)

# 7. exp x -2x = 12   -> plusieur sol 

def f7 (x):
    return exp(x) -2*x -12
def f7der(x):
    return exp(x) -2 

print ("f7 :", Newton(f7, f7der, 0, epsilon, Nitermax),"\n")

print ("f7 :", Dichotomie(f7, -8, 1, epsilon),"\n")

print("f7 :",Secante(f7, -8, 1, epsilon, Nitermax), "\n"*3)

# 8. 2 tan x = x + 1  -> plusieurs sol 

def f8 (x):
    return 2 * tan(x) -x -1 
def f8der(x):
    return 2 * (1 + tan(x)**2) -1

print("f8 :", Newton(f8, f8der, 0, epsilon, Nitermax))
print("f8bis :", Newton(f8, f8der, -2.4, epsilon, Nitermax))
print("f8ter :", Newton(f8, f8der, 2.4, epsilon, Nitermax),"\n")

print ("f8 :", Dichotomie(f8, -0.5, 1, epsilon))
print ("f8bis :", Dichotomie(f8, -6, -4, epsilon))
print ("f8ter :", Dichotomie(f8, 2, 5, epsilon),"\n")

print("f8 :",Secante(f8, -0.5, 1, epsilon, Nitermax))
print("f8bis :",Secante(f8, -6, -4, epsilon, Nitermax))
print("f8ter :",Secante(f8, 2, 5, epsilon, Nitermax), "\n"*3)

# 9.  exp x = x^4 + 3 

def f9 (x):
    return exp(x) - x**4 -3 
def f9der(x):
    return exp(x) - 4 *x **3

print ("f9 :", Newton(f9, f9der, 0.8, epsilon, Nitermax),"\n")

print ("f9 :", Dichotomie(f9, 0.1, 9, epsilon),"\n")

print("f9 :",Secante(f9, 6, 9, epsilon, Nitermax), "\n"*3)

# 10. x^4 -2x^2 + 4x = 17  -> plusieurs sol 

def f10(x):
    return x**4 - 2 * x ** 2 + 4 * x -17
def f10der(x):
    return 4*x**3 -4*x + 4 

print ("f10 :", Newton(f10, f10der, 0, epsilon, Nitermax))
print ("f10bis :", Newton(f10, f10der, 4, epsilon, Nitermax),"\n")

print ("f10 :", Dichotomie(f10, -2, 3, epsilon))
print ("f10bis :", Dichotomie(f10, 1, 5, epsilon),"\n")

print("f10 :",Secante(f10, -2, 3, epsilon, Nitermax))
print("f10bis :",Secante(f10, 1, 5, epsilon, Nitermax), "\n"*3)

# 11. exp x ln (x^4 + 4) = 5 

def f11(x):
    return exp(x)*log(x**4 + 4) -5 
def f11der(x):
    return exp(x)*(log(x**4 +4)-5 +((4*x**3)/x**4 + 4))

print ("f11 :", Newton(f11, f11der, -3, epsilon, Nitermax),"\n")

print ("f11 :", Dichotomie(f11, -8, 4, epsilon), "\n")
       
print("f11 :",Secante(f11, -7, 1, epsilon, Nitermax), "\n"*3)     


# 12. exp x + x exp -x = 2 

def f12(x):
    return exp(x)+x*exp(-x)-2
def f12der(x):
    return exp(x) + exp(-x)*(1-x)

print ("f12 :", Newton(f12, f12der, 0.5, epsilon, Nitermax),"\n")

print ("f12 :", Dichotomie(f12, -1, 1, epsilon), "\n")
       
print("f12 :",Secante(f12, -1, 1, epsilon, Nitermax), "\n") 
